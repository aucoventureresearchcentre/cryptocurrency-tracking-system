version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: crypto-tracker-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-dbuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dbpassword}
      POSTGRES_DB: ${POSTGRES_DB:-crypto_tracker}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/backend/scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - crypto-tracker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dbuser} -d ${POSTGRES_DB:-crypto_tracker}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TimescaleDB时间序列数据库
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: crypto-tracker-timescaledb
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-dbuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dbpassword}
      POSTGRES_DB: ${TIMESCALE_DB:-timeseries}
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./src/backend/scripts/init_timescale.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - crypto-tracker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dbuser} -d ${TIMESCALE_DB:-timeseries}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j图数据库
  neo4j:
    image: neo4j:4.4
    container_name: crypto-tracker-neo4j
    restart: always
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-neo4jpassword}
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./src/backend/scripts/init_graph.cypher:/init.cypher
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    networks:
      - crypto-tracker-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:alpine
    container_name: crypto-tracker-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - crypto-tracker-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ消息队列
  rabbitmq:
    image: rabbitmq:3-management
    container_name: crypto-tracker-rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"  # AMQP
      - "15672:15672"  # 管理界面
    networks:
      - crypto-tracker-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 后端API服务
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: crypto-tracker-backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      # 应用设置
      APP_NAME: ${APP_NAME:-加密货币追踪系统}
      DEBUG: ${DEBUG:-false}
      
      # 安全设置
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # 数据库设置
      DATABASE_URL: postgresql://${POSTGRES_USER:-dbuser}:${POSTGRES_PASSWORD:-dbpassword}@postgres:5432/${POSTGRES_DB:-crypto_tracker}
      TIMESCALE_URL: postgresql://${POSTGRES_USER:-dbuser}:${POSTGRES_PASSWORD:-dbpassword}@timescaledb:5432/${TIMESCALE_DB:-timeseries}
      NEO4J_URL: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-neo4jpassword}
      
      # Redis设置
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispassword}@redis:6379/0
      
      # RabbitMQ设置
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672/
      
      # 区块链设置
      ETH_NODE_URL: ${ETH_NODE_URL}
      BTC_NODE_URL: ${BTC_NODE_URL}
      BTC_NODE_USER: ${BTC_NODE_USER}
      BTC_NODE_PASSWORD: ${BTC_NODE_PASSWORD}
      
      # 警报设置
      LARGE_TX_THRESHOLD: ${LARGE_TX_THRESHOLD:-500000}
      DISPERSION_COUNT_THRESHOLD: ${DISPERSION_COUNT_THRESHOLD:-5}
      DISPERSION_TIME_WINDOW: ${DISPERSION_TIME_WINDOW:-60}
      
      # CORS设置
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://frontend:3000}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,frontend,backend}
      
      # 管理员设置
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@example.com}
    volumes:
      - ./src/backend:/app
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - crypto-tracker-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # 前端Web应用
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
    container_name: crypto-tracker-frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "3000:3000"
    networks:
      - crypto-tracker-network
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
    volumes:
      - ./src/frontend:/app
      - /app/node_modules

  # Nginx反向代理（生产环境）
  nginx:
    image: nginx:alpine
    container_name: crypto-tracker-nginx
    restart: always
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - crypto-tracker-network
    profiles:
      - prod

networks:
  crypto-tracker-network:
    driver: bridge

volumes:
  postgres_data:
  timescale_data:
  neo4j_data:
  neo4j_logs:
  redis_data:
  rabbitmq_data:
  backend_logs:
